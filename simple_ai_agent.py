# -*- coding: utf-8 -*-
"""simple ai agent.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JkNgT_gueBPYVVVvOY9jJCqYME6UQ4e0
"""

!pip install langchain langchain-community google-generativeai

!pip install langchain-google-genai

!pip show langchain-google-genai

!export GOOGLE_API_KEY="AIzaSyBS1L2JanQLMbtK3tEYA-z5i0UW9beGMoA"

!python3 --version

import os
from langchain_google_genai import GoogleGenerativeAI

# Set API key explicitly
os.environ["GOOGLE_API_KEY"] = "AIzaSyBS1L2JanQLMbtK3tEYA-z5i0UW9beGMoA"

# Initialize the model
llm = GoogleGenerativeAI(model="gemini-pro")

# Test the AI agent
response = llm.invoke("remote control car?")
print(response)

# Test the AI agent
response = llm.invoke("what is a langchain?")
print(response)

import os
from langchain_google_genai import GoogleGenerativeAI

# Set your Google API Key
os.environ["GOOGLE_API_KEY"] = "AIzaSyBS1L2JanQLMbtK3tEYA-z5i0UW9beGMoA"

# Initialize the LLM
llm = GoogleGenerativeAI(model="gemini-pro")

print("ü§ñ AI Chatbot: Type 'exit' to quit.\n")

while True:
    user_input = input("You: ")
    if user_input.lower() == "exit":
        print("AI: Goodbye! üëã")
        break

    try:
        response = llm.invoke(user_input)
        print(f"AI: {response}")
    except Exception as e:
        print(f"Error: {e}")

!pip install --upgrade langchain langchain-community google-generativeai

!pip install langchain langchain-google-genai langchain-community google-generativeai tavily-python

!export GOOGLE_API_KEY="AIzaSyBS1L2JanQLMbtK3tEYA-z5i0UW9beGMoA"
!export TAVILY_API_KEY="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"

import os
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain_core.messages import HumanMessage
from langchain.agents import initialize_agent, AgentType
from langchain.tools import TavilySearchResults

def main():
    # Fetch API keys
    google_api_key = os.getenv("GOOGLE_API_KEY")
    tavily_api_key = os.getenv("TAVILY_API_KEY")

    if not google_api_key or not tavily_api_key:
        print("Error: Missing API keys. Set GOOGLE_API_KEY and TAVILY_API_KEY.")
        return

    # Initialize LLM
    llm = ChatGoogleGenerativeAI(model="gemini-pro", google_api_key=google_api_key)

    # Initialize Tavily Web Search Tool
    search_tool = TavilySearchResults(api_key=tavily_api_key)

    # Create an agent with tools
    agent = initialize_agent(
        tools=[search_tool],
        llm=llm,
        agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,  # Allows reasoning and tool use
        verbose=True
    )

    print("\nü§ñ AI Chatbot with Web Search: Type 'exit' to quit.\n")

    while True:
        user_input = input("You: ")
        if user_input.lower() == "exit":
            print("Goodbye!")
            break

        response = agent.run(user_input)
        print("AI:", response)

if __name__ == "__main__":
    main()

!export GOOGLE_API_KEY="AIzaSyBS1L2JanQLMbtK3tEYA-z5i0UW9beGMoA"
!export TAVILY_API_KEY="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"
!python langchain_gemini_agent.py

import os
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain_core.messages import HumanMessage
from langchain.agents import initialize_agent, AgentType
from langchain.tools import TavilySearchResults

def format_news_response(news_results, llm):
    """Formats and summarizes news search results using Gemini."""

    # Extract relevant parts of the search results
    sources = [f"{item['title']}: {item['url']}" for item in news_results]
    news_text = "\n".join(sources)

    prompt = f"""
    Here are some recent news articles:\n{news_text}

    Please summarize the key points concisely in a human-readable format. Highlight important insights,
    trends, or key takeaways. Format the output cleanly.
    """

    # Use Gemini to process and structure the news
    summary = llm.invoke([HumanMessage(content=prompt)])
    return summary.content  # Extract the text response

def main():
    google_api_key = os.getenv("GOOGLE_API_KEY")
    tavily_api_key = os.getenv("TAVILY_API_KEY")

    if not google_api_key or not tavily_api_key:
        print("Error: Missing API keys. Set GOOGLE_API_KEY and TAVILY_API_KEY.")
        return

    # Initialize LLM
    llm = ChatGoogleGenerativeAI(model="gemini-pro", google_api_key=google_api_key)

    # Initialize Tavily Web Search Tool
    search_tool = TavilySearchResults(api_key=tavily_api_key)

    print("\nü§ñ AI Chatbot with Web Search: Type 'exit' to quit.\n")

    while True:
        user_input = input("You: ")
        if user_input.lower() == "exit":
            print("Goodbye!")
            break

        if "news" in user_input.lower():
            print("Fetching the latest news...üîç")
            news_results = search_tool.invoke(user_input)

            if not news_results:
                print("No news found. Try another query.")
                continue

            structured_news = format_news_response(news_results, llm)
            print("\nüì∞ **Latest News Summary:**\n")
            print(structured_news)
        else:
            response = llm.invoke([HumanMessage(content=user_input)]).content
            print("AI:", response)

if __name__ == "__main__":
    main()

